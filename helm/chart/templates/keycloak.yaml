{{- if and .Values.keycloak.enabled (not .Values.keycloak.external) }}
apiVersion: v1
kind: Secret
metadata:
  name: "{{ .Release.Name }}-keycloak-admin"
type: kubernetes.io/basic-auth
data:
  username: "{{ b64enc .Values.keycloak.admin.username }}"
  password: "{{ b64enc (default (randAlphaNum 25) .Values.keycloak.admin.password) }}"
{{- range .Values.keycloak.users }}
---
apiVersion: v1
kind: Secret
metadata:
  name: "{{ $.Release.Name }}-keycloak-user-{{ .username }}"
type: kubernetes.io/basic-auth
data:
  username: "{{ b64enc .username }}"
  password: "{{ b64enc (default (randAlphaNum 25) .password) }}"
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-keycloak"
  labels:
    app.kubernetes.io/name: "keycloak"
    app.kubernetes.io/instance: "{{ .Release.Name }}"
    app.kubernetes.io/managed-by: "{{ .Release.Service }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: "keycloak"
      app.kubernetes.io/instance: "{{ .Release.Name }}"
      app.kubernetes.io/managed-by: "{{ .Release.Service }}"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "keycloak"
        app.kubernetes.io/instance: "{{ .Release.Name }}"
        app.kubernetes.io/managed-by: "{{ .Release.Service }}"
    spec:
      containers:
      - name: keycloak
        image: "{{ .Values.keycloak.image }}:{{ .Values.keycloak.tag }}"
        args:
          - start
          - "--proxy=edge"
          - "--hostname-url={{ .Values.keycloak.url }}"
{{- if .Values.postgresql.enabled }}
          - "--db=postgres"
          - "--db-url=jdbc:postgresql://{{ .Release.Name }}-postgresql/{{ .Values.postgresql.keycloak.database }}"
          - "--db-username=$(DB_USER)"
          - "--db-password=$(DB_PASSWORD)"
{{- end }}
        env:
{{- if .Values.postgresql.enabled }}
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-postgresql-keycloak"
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-postgresql-keycloak"
              key: password
{{- end }}
        - name: KEYCLOAK_ADMIN
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-keycloak-admin"
              key: username
        - name: KEYCLOAK_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-keycloak-admin"
              key: password
        ports:
        - name: http
          containerPort: 8080
        readinessProbe:
          httpGet:
            path: /realms/master
            port: 8080
            httpHeaders:
            - name: X-Forwarded-For
              value: "127.0.0.1"
            - name: X-Forwarded-Proto
              value: "{{ (urlParse .Values.keycloak.url).scheme }}"
            - name: X-Forwarded-Host
              value: "{{ (urlParse .Values.keycloak.url).host }}"
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Release.Name }}-keycloak"
  labels:
    app.kubernetes.io/name: "keycloak"
    app.kubernetes.io/instance: "{{ .Release.Name }}"
    app.kubernetes.io/managed-by: "{{ .Release.Service }}"
spec:
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    app.kubernetes.io/name: "keycloak"
    app.kubernetes.io/instance: "{{ .Release.Name }}"
    app.kubernetes.io/managed-by: "{{ .Release.Service }}"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "{{ .Release.Name }}-keycloak"
spec:
{{- if eq (urlParse .Values.keycloak.url).scheme "https" }}
  tls:
  - hosts:
    - "{{ (urlParse .Values.keycloak.url).host }}"
{{- end }}
  rules:
  - host: "{{ (urlParse .Values.keycloak.url).host }}"
    http:
      paths:
      - pathType: Prefix
        path: "{{ (urlParse .Values.keycloak.url).path }}/"
        backend:
          service:
            name: "{{ .Release.Name }}-keycloak"
            port:
              name: http
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-keycloak-postinstall"
  labels:
    app.kubernetes.io/name: "keycloak-postinstall"
    app.kubernetes.io/instance: "{{ .Release.Name }}"
    app.kubernetes.io/managed-by: "{{ .Release.Service }}"
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-4"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "{{ .Release.Name }}-keycloak-postinstall"
      labels:
        app.kubernetes.io/name: "keycloak-postinstall"
        app.kubernetes.io/instance: "{{ .Release.Name }}"
        app.kubernetes.io/managed-by: "{{ .Release.Service }}"
    spec:
      restartPolicy: Never
      containers:
      - name: keycloak-post-install
        image: "{{ .Values.keycloak.image }}:{{ .Values.keycloak.tag }}"
        command: ["/bin/sh", "-c"]
        args:
          - |
            while [[ "$(curl -s -o /dev/null -L -w ''%{http_code}'' -H 'Host: {{ (urlParse .Values.keycloak.url).host }}' http://{{ .Release.Name }}-keycloak:8080/)" != "200" ]]; do sleep 1; done &&
            /opt/keycloak/bin/kcadm.sh config credentials --server http://{{ .Release.Name }}-keycloak:8080/ --realm master --user "$KEYCLOAK_USER" --password "$KEYCLOAK_PASSWORD" &&
            /opt/keycloak/bin/kcadm.sh create realms -s realm={{ .Values.keycloak.realm }} -s enabled=true &&
{{- range .Values.keycloak.users }}
            /opt/keycloak/bin/kcadm.sh create users -r {{ $.Values.keycloak.realm }} -s username="{{ .username }}" -s enabled=true &&
            /opt/keycloak/bin/kcadm.sh set-password -r {{ $.Values.keycloak.realm }} --username "{{ .username }}" --new-password "$KEYCLOAK_PASSWORD_{{ sha256sum .username }}" &&
{{- end }}
            /opt/keycloak/bin/kcadm.sh create clients -r {{ .Values.keycloak.realm }} -s clientId={{ .Values.keycloak.client }} -s publicClient=true -s 'baseUrl={{ .Values.musicociel.url }}' -s 'attributes={"post.logout.redirect.uris":"{{ .Values.musicociel.url }}/*"}' -s 'redirectUris=["{{ .Values.musicociel.url }}/*"]'
            CLIENT_ID="$(/opt/keycloak/bin/kcadm.sh get clients -r {{ .Values.keycloak.realm }} -q clientId={{ .Values.keycloak.client }} --fields id | grep id | sed 's/\s*"id"\s*:\s*"\(.*\)"/\1/' )"
            /opt/keycloak/bin/kcadm.sh create clients/$CLIENT_ID/protocol-mappers/models -r {{ .Values.keycloak.realm }} -s 'name={{ .Values.keycloak.client }}-audience' -s 'protocol=openid-connect' -s 'protocolMapper=oidc-audience-mapper' -s 'config."included.client.audience"={{ .Values.keycloak.client }}' -s 'config."access.token.claim"=true'
        env:
{{- range .Values.keycloak.users }}
        - name: "KEYCLOAK_PASSWORD_{{ sha256sum .username }}"
          valueFrom:
            secretKeyRef:
              name: "{{ $.Release.Name }}-keycloak-user-{{ .username }}"
              key: password
{{- end }}
        - name: KEYCLOAK_USER
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-keycloak-admin"
              key: username
        - name: KEYCLOAK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-keycloak-admin"
              key: password
{{- end }}
